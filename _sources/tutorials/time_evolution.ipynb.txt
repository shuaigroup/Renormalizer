{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "a27d63fc-7bef-48af-ad11-1cb14fb6b4ec",
   "metadata": {},
   "source": [
    "# Time Evolution using Renormalizer"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "196a8dc4-7e25-4cd2-8472-8ced3d2e46d3",
   "metadata": {},
   "source": [
    "## Overview\n",
    "\n",
    "In this notebook we will simulate the charge transfer between two molecules using the Marcus model\n",
    "\n",
    "$$\n",
    "    \\hat H = -V(a^\\dagger_0 a_1 + a^\\dagger_1 a_0) + \\Delta G a^\\dagger_1 a_1 + \\omega \\sum_{i=0, 1} b^\\dagger_i b_i + g \\omega \\sum_{i=0, 1} a^\\dagger_i a_i (b^\\dagger_i + b_i)\n",
    "$$\n",
    "\n",
    "with transfer integral $V=-0.1$, dimensionless coupling constant $g=1$, vibration frequency $\\omega=0.5$.\n",
    "\n",
    "We will first show how to use Renormalizer to simulation the time evolution at $\\Delta G = 0$.\n",
    "Then, we will show that, by decreasing the reaction Gibbs free energy change $\\Delta G$, the reaction rate will first increase and then decrease, as predicted by the Marcus theory."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99aa0961-8036-4204-9374-acabb1808943",
   "metadata": {},
   "source": [
    "## Preparation: Setting Up Logger"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "56f1fde2-97fb-43f7-b7fa-a2fa0fb38497",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:30.431651Z",
     "iopub.status.busy": "2025-08-12T09:13:30.431067Z",
     "iopub.status.idle": "2025-08-12T09:13:31.100547Z",
     "shell.execute_reply": "2025-08-12T09:13:31.099748Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,054[INFO] Use NumPy as backend\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,055[INFO] numpy random seed is 9012\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,056[INFO] random seed is 1092\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,064[INFO] Git Commit Hash: 17d8634f55d07699b9771eb4183b519874cb7d31\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,065[INFO] use 64 bits\n"
     ]
    }
   ],
   "source": [
    "from renormalizer.utils.log import package_logger as logger"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "873c875c-669a-4b88-9158-098713f07bd4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:31.103362Z",
     "iopub.status.busy": "2025-08-12T09:13:31.102845Z",
     "iopub.status.idle": "2025-08-12T09:13:31.107169Z",
     "shell.execute_reply": "2025-08-12T09:13:31.106427Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,104[DEBUG] logger output\n"
     ]
    }
   ],
   "source": [
    "logger.debug(\"logger output\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "319fd86f-834f-4c7f-89d8-d5d914321f63",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:31.109507Z",
     "iopub.status.busy": "2025-08-12T09:13:31.109114Z",
     "iopub.status.idle": "2025-08-12T09:13:31.112340Z",
     "shell.execute_reply": "2025-08-12T09:13:31.111660Z"
    }
   },
   "outputs": [],
   "source": [
    "from renormalizer.utils.log import set_stream_level, INFO"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8d8232f3-dba4-4783-9a42-5df16dbd31ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:31.114568Z",
     "iopub.status.busy": "2025-08-12T09:13:31.114028Z",
     "iopub.status.idle": "2025-08-12T09:13:31.117084Z",
     "shell.execute_reply": "2025-08-12T09:13:31.116431Z"
    }
   },
   "outputs": [],
   "source": [
    "# filter logger output\n",
    "set_stream_level(INFO)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "30e8e422-0a2e-42e3-92d9-6689cc87d64f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:31.119152Z",
     "iopub.status.busy": "2025-08-12T09:13:31.118937Z",
     "iopub.status.idle": "2025-08-12T09:13:31.121823Z",
     "shell.execute_reply": "2025-08-12T09:13:31.121258Z"
    }
   },
   "outputs": [],
   "source": [
    "logger.debug(\"This message will not be shown\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "25cf11f4-9538-4f85-aaba-ed5cdc7f611c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:31.123787Z",
     "iopub.status.busy": "2025-08-12T09:13:31.123423Z",
     "iopub.status.idle": "2025-08-12T09:13:31.127215Z",
     "shell.execute_reply": "2025-08-12T09:13:31.126552Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,124[INFO] Logger output\n"
     ]
    }
   ],
   "source": [
    "logger.info(\"Logger output\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43e4b11c-f5ec-4e65-8838-ef91e87e11ee",
   "metadata": {},
   "source": [
    "## Define the Model and Initial State"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f0e54566-edab-423e-81d6-e9d9365e331c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:31.129176Z",
     "iopub.status.busy": "2025-08-12T09:13:31.128965Z",
     "iopub.status.idle": "2025-08-12T09:13:31.132005Z",
     "shell.execute_reply": "2025-08-12T09:13:31.131454Z"
    }
   },
   "outputs": [],
   "source": [
    "from renormalizer import Op, BasisMultiElectron, BasisSHO, Model\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "35139f14-b5f6-4720-96b2-100c57106271",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:31.134232Z",
     "iopub.status.busy": "2025-08-12T09:13:31.133753Z",
     "iopub.status.idle": "2025-08-12T09:13:31.136795Z",
     "shell.execute_reply": "2025-08-12T09:13:31.136270Z"
    }
   },
   "outputs": [],
   "source": [
    "v = -0.1\n",
    "g = 1\n",
    "omega = 0.5\n",
    "nbas = 16"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "8dadf496-f732-4442-9c4e-71417950924f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:31.138898Z",
     "iopub.status.busy": "2025-08-12T09:13:31.138696Z",
     "iopub.status.idle": "2025-08-12T09:13:31.143172Z",
     "shell.execute_reply": "2025-08-12T09:13:31.142639Z"
    }
   },
   "outputs": [],
   "source": [
    "def get_model(delta_g):\n",
    "    ham_terms = v * Op(r\"a^\\dagger a\", [\"e0\", \"e1\"]) + v * Op(r\"a^\\dagger a\", [\"e1\", \"e0\"])\n",
    "    ham_terms += delta_g * Op(r\"a^\\dagger a\", \"e1\")\n",
    "    for i in range(2):\n",
    "        ham_terms += omega * Op(r\"b^\\dagger b\", f\"v{i}\")\n",
    "        ham_terms += g * omega * Op(r\"a^\\dagger a\", f\"e{i}\") * Op(r\"b^\\dagger+b\", f\"v{i}\")\n",
    "    basis = [BasisMultiElectron([\"e0\", \"e1\"], [0, 0]), BasisSHO(\"v0\", omega, nbas), BasisSHO(\"v1\", omega, nbas)]\n",
    "    return Model(basis, ham_terms)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c847063d-c59e-4e71-931e-a69064a61a24",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:31.145105Z",
     "iopub.status.busy": "2025-08-12T09:13:31.144909Z",
     "iopub.status.idle": "2025-08-12T09:13:31.149352Z",
     "shell.execute_reply": "2025-08-12T09:13:31.148826Z"
    }
   },
   "outputs": [],
   "source": [
    "# using a relaxed initial state\n",
    "def get_init_condition():\n",
    "    basis = BasisSHO(0, omega, nbas)\n",
    "    state = np.linalg.eigh(basis.op_mat(r\"b^\\dagger b\") + g * basis.op_mat(r\"b^\\dagger+b\"))[1][:, 0]\n",
    "    return {\"v0\": state}\n",
    "init_condition = get_init_condition()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e306a49-9390-4770-ba9e-bbb749b312ca",
   "metadata": {},
   "source": [
    "## Time Evolution with the Default Configuration\n",
    "Next, we run the simulation using the `evolve` method in the `Mps` class. At this phase, we keep $\\Delta G = 0$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "bd6aea7e-a63d-4a3f-b140-81f67c887bda",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:31.151417Z",
     "iopub.status.busy": "2025-08-12T09:13:31.151016Z",
     "iopub.status.idle": "2025-08-12T09:13:31.154157Z",
     "shell.execute_reply": "2025-08-12T09:13:31.153612Z"
    }
   },
   "outputs": [],
   "source": [
    "delta_g = 0\n",
    "model = get_model(delta_g)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "2ed5d9b2-f6c2-498d-b4a0-efb2c19baefc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:31.156099Z",
     "iopub.status.busy": "2025-08-12T09:13:31.155719Z",
     "iopub.status.idle": "2025-08-12T09:13:31.158440Z",
     "shell.execute_reply": "2025-08-12T09:13:31.157908Z"
    }
   },
   "outputs": [],
   "source": [
    "from renormalizer import Mps, Mpo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a94d9e55-b1b2-4668-a47b-571f5fb74320",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:31.160279Z",
     "iopub.status.busy": "2025-08-12T09:13:31.160067Z",
     "iopub.status.idle": "2025-08-12T09:13:31.168773Z",
     "shell.execute_reply": "2025-08-12T09:13:31.168270Z"
    }
   },
   "outputs": [],
   "source": [
    "# Hamiltonian MPO\n",
    "mpo = Mpo(model)\n",
    "# The occupation of e0\n",
    "n_op = Mpo(model, Op(r\"a^\\dagger a\", \"e0\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0779c802-815b-4c7a-8c17-163bbd3437ee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:31.170668Z",
     "iopub.status.busy": "2025-08-12T09:13:31.170465Z",
     "iopub.status.idle": "2025-08-12T09:13:31.999308Z",
     "shell.execute_reply": "2025-08-12T09:13:31.998598Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,173[INFO] Step 0. Time 0.00. $n$ 0.9999999999999998\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,186[INFO] Step 1. Time 0.20. $n$ 0.9996030537865594\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,199[INFO] Step 2. Time 0.40. $n$ 0.998431396656162\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,212[INFO] Step 3. Time 0.60. $n$ 0.9965532876450579\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,228[INFO] Step 4. Time 0.80. $n$ 0.9940731362639054\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,243[INFO] Step 5. Time 1.00. $n$ 0.9911161868842491\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,259[INFO] Step 6. Time 1.20. $n$ 0.9878132450238745\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,275[INFO] Step 7. Time 1.40. $n$ 0.9842873078294337\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,291[INFO] Step 8. Time 1.60. $n$ 0.9806441927926955\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,307[INFO] Step 9. Time 1.80. $n$ 0.976967746624379\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,323[INFO] Step 10. Time 2.00. $n$ 0.9733182226560808\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,339[INFO] Step 11. Time 2.20. $n$ 0.9697373081106376\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,355[INFO] Step 12. Time 2.40. $n$ 0.9662497016753406\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,371[INFO] Step 13. Time 2.60. $n$ 0.962867160945706\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,387[INFO] Step 14. Time 2.80. $n$ 0.9595919026133962\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,405[INFO] Step 15. Time 3.00. $n$ 0.9564197521679629\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,421[INFO] Step 16. Time 3.20. $n$ 0.9533423734970323\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,438[INFO] Step 17. Time 3.40. $n$ 0.9503492089387037\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,455[INFO] Step 18. Time 3.60. $n$ 0.9474287391824951\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,471[INFO] Step 19. Time 3.80. $n$ 0.9445692798814913\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,487[INFO] Step 20. Time 4.00. $n$ 0.9417594196434944\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,504[INFO] Step 21. Time 4.20. $n$ 0.9389883140168839\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,520[INFO] Step 22. Time 4.40. $n$ 0.9362456942950406\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,538[INFO] Step 23. Time 4.60. $n$ 0.9335221984937244\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,561[INFO] Step 24. Time 4.80. $n$ 0.9308095732941701\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,581[INFO] Step 25. Time 5.00. $n$ 0.9281008849250423\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,599[INFO] Step 26. Time 5.20. $n$ 0.9253906107085343\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,616[INFO] Step 27. Time 5.40. $n$ 0.9226738471654728\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,633[INFO] Step 28. Time 5.60. $n$ 0.9199478805518423\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,649[INFO] Step 29. Time 5.80. $n$ 0.9172094618331406\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,665[INFO] Step 30. Time 6.00. $n$ 0.9144551950424458\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,682[INFO] Step 31. Time 6.20. $n$ 0.9116816732036944\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,698[INFO] Step 32. Time 6.40. $n$ 0.9088859026726781\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,714[INFO] Step 33. Time 6.60. $n$ 0.9060659656334908\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,731[INFO] Step 34. Time 6.80. $n$ 0.9032210121837198\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,747[INFO] Step 35. Time 7.00. $n$ 0.9003515623906606\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,763[INFO] Step 36. Time 7.20. $n$ 0.8974590790192766\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,779[INFO] Step 37. Time 7.40. $n$ 0.8945453849965326\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,795[INFO] Step 38. Time 7.60. $n$ 0.8916120979060871\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,812[INFO] Step 39. Time 7.80. $n$ 0.8886602437062094\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,828[INFO] Step 40. Time 8.00. $n$ 0.8856902107426247\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,844[INFO] Step 41. Time 8.20. $n$ 0.8827020259679245\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,861[INFO] Step 42. Time 8.40. $n$ 0.8796958667524066\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,877[INFO] Step 43. Time 8.60. $n$ 0.8766726737398559\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,895[INFO] Step 44. Time 8.80. $n$ 0.8736347299848458\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,912[INFO] Step 45. Time 9.00. $n$ 0.8705861034366976\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,930[INFO] Step 46. Time 9.20. $n$ 0.8675328737556515\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,947[INFO] Step 47. Time 9.40. $n$ 0.8644830817098144\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,965[INFO] Step 48. Time 9.60. $n$ 0.8614463370235249\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:31,981[INFO] Step 49. Time 9.80. $n$ 0.8584330043902285\n"
     ]
    }
   ],
   "source": [
    "# initialize the MPS\n",
    "mps = Mps.hartree_product_state(model, condition=init_condition)\n",
    "# time evolution step\n",
    "dt = 0.2\n",
    "# record the electronic occupation\n",
    "n_list = []\n",
    "for i_step in range(50):\n",
    "    n = mps.expectation(n_op)\n",
    "    logger.info(f\"Step {i_step}. Time {i_step * dt:.2f}. $n$ {n}\")\n",
    "    # perform time evolution. Note that the evolution is not in-place.\n",
    "    mps = mps.evolve(mpo, dt)\n",
    "    n_list.append(n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "273abac9-cdd0-451f-adaf-54aa4318dacb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:32.002450Z",
     "iopub.status.busy": "2025-08-12T09:13:32.001925Z",
     "iopub.status.idle": "2025-08-12T09:13:34.372588Z",
     "shell.execute_reply": "2025-08-12T09:13:34.371923Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting the occupation\n",
    "from matplotlib import pyplot as plt\n",
    "plt.style.use(\"mm.mplstyle\")\n",
    "\n",
    "plt.plot(np.arange(len(n_list)) * dt, n_list, label=\"Default\")\n",
    "plt.xlabel(\"$t$\")\n",
    "plt.ylabel(r\"Occupation $\\langle a^\\dagger_0 a_0 \\rangle$\")\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "114ac58a-b89c-4fe0-841b-1d9d0c1df335",
   "metadata": {},
   "source": [
    "In this example, the time evolution is performed with default time evolution configuration and MPS compression configuration.\n",
    "\n",
    "Renormalizer by default uses the RK4 \"propagation and compression\" method for time evolution.\n",
    "The advantage of the method is that it is easy to understand and setup. \n",
    "\n",
    "> Please refer to our [recent review](https://weitangligroup.com/pdf/2022time.pdf) for a discussion of the different time evolution schemes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "68b39110-309b-4f10-87bd-2fbfe0244d8e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:34.375183Z",
     "iopub.status.busy": "2025-08-12T09:13:34.374760Z",
     "iopub.status.idle": "2025-08-12T09:13:34.379896Z",
     "shell.execute_reply": "2025-08-12T09:13:34.379340Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<EvolveMethod.prop_and_compress: 'P&C'>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mps.evolve_config.method"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a3b01b7-3b13-48be-a9a0-7a8f99cb9ba4",
   "metadata": {},
   "source": [
    "Regarding MPS compression/truncation configuration, Renormalizer by default employs a truncation scheme based on the the singular value threshold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4a87c29d-66c4-4980-a68d-f6f9b54ec97c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:34.382081Z",
     "iopub.status.busy": "2025-08-12T09:13:34.381699Z",
     "iopub.status.idle": "2025-08-12T09:13:34.385895Z",
     "shell.execute_reply": "2025-08-12T09:13:34.385381Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(<CompressCriteria.threshold: 'threshold'>, 0.001)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mps.compress_config.criteria, mps.compress_config.threshold"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f909ca0-1086-4fa2-9dcd-3d0c701f0749",
   "metadata": {},
   "source": [
    "Inspection of the dimension of the final mps after time evolution shows that the compression is efficient."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "695d929a-e9ac-40a0-ab81-ed5132754aa6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:34.388172Z",
     "iopub.status.busy": "2025-08-12T09:13:34.387769Z",
     "iopub.status.idle": "2025-08-12T09:13:34.391857Z",
     "shell.execute_reply": "2025-08-12T09:13:34.391334Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 4, 1]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mps.bond_dims"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1612b953-9ef9-4823-9098-76d2c5b79ca5",
   "metadata": {},
   "source": [
    "## Configuring Time Evolution\n",
    "In order to configure the time evolution, you should update the `evolve_config` and `compress_config` attributes of an MPS instance. \n",
    "These attributes are instances of the `EvolveConfig` class and the `CompressConfig` class.\n",
    "Please see the API referece for full options of the configuration classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "3a2bde08-4e11-4300-a5c7-22599d161bdd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:34.394035Z",
     "iopub.status.busy": "2025-08-12T09:13:34.393662Z",
     "iopub.status.idle": "2025-08-12T09:13:34.396462Z",
     "shell.execute_reply": "2025-08-12T09:13:34.395924Z"
    }
   },
   "outputs": [],
   "source": [
    "from renormalizer.utils.configs import CompressConfig, CompressCriteria"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "43784000-c652-41c1-9045-3cc8d462ad64",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:34.398539Z",
     "iopub.status.busy": "2025-08-12T09:13:34.398046Z",
     "iopub.status.idle": "2025-08-12T09:13:34.401110Z",
     "shell.execute_reply": "2025-08-12T09:13:34.400577Z"
    }
   },
   "outputs": [],
   "source": [
    "# update the compresssion configuration. Adopt a fixed bond dimension of 8\n",
    "mps.compress_config = CompressConfig(CompressCriteria.fixed, max_bonddim=8)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "91b2bd01-2a38-4963-aa88-a6b6799309cd",
   "metadata": {},
   "source": [
    "Next, we perform one more step of the time evolution, and the bond dimension in the middle of the MPS is increased from 4 to 8, according to the updated compression configuration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "69af3e7f-0f3c-4d3f-9ee8-1dcc7fa85861",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:34.403177Z",
     "iopub.status.busy": "2025-08-12T09:13:34.402931Z",
     "iopub.status.idle": "2025-08-12T09:13:34.423255Z",
     "shell.execute_reply": "2025-08-12T09:13:34.422678Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 8, 1]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_mps = mps.evolve(mpo, dt)\n",
    "new_mps.bond_dims"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd789f50-9d8b-4e6b-990b-16771212e1ee",
   "metadata": {},
   "source": [
    "Recent studies have shown that methods based on time dependent variantional principle (TDVP) show higher accuracy and efficiency.\n",
    "In our production runs, we usually employ one-site TDVP with projector splitting (TDVP-PS) for time evolution.\n",
    "TDVP-PS allows much larger time evolution step size and reduces memory consumption.\n",
    "However, its setup is a little more complex than propagation and compression, since one-site TDVP generally can not adjust bond dimension during time evolution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "e62d1b1d-bfad-40e0-8df5-21023c822510",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:34.426039Z",
     "iopub.status.busy": "2025-08-12T09:13:34.425810Z",
     "iopub.status.idle": "2025-08-12T09:13:34.429971Z",
     "shell.execute_reply": "2025-08-12T09:13:34.429361Z"
    }
   },
   "outputs": [],
   "source": [
    "from renormalizer.utils.configs import EvolveConfig, EvolveMethod"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9bff686c-aeb0-463b-8208-d810c9a8f027",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:34.432838Z",
     "iopub.status.busy": "2025-08-12T09:13:34.432605Z",
     "iopub.status.idle": "2025-08-12T09:13:34.436847Z",
     "shell.execute_reply": "2025-08-12T09:13:34.436236Z"
    }
   },
   "outputs": [],
   "source": [
    "mps.evolve_config = EvolveConfig(EvolveMethod.tdvp_ps)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7dde4b8-49ff-447b-8bc1-0bf0431dac74",
   "metadata": {},
   "source": [
    "Next, we perform one more step of the time evolution using TDVP-PS.\n",
    "\n",
    "Note that the bond dimension in the middle of the MPS does not increase from 4 to 8.\n",
    "This is because one-site TDVP-PS does not alter the bond dimension."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a41f442d-56ca-4979-8c1d-886339f22c96",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:34.439716Z",
     "iopub.status.busy": "2025-08-12T09:13:34.439490Z",
     "iopub.status.idle": "2025-08-12T09:13:34.466906Z",
     "shell.execute_reply": "2025-08-12T09:13:34.466299Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 4, 1]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_mps = mps.evolve(mpo, dt)\n",
    "new_mps.bond_dims"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b296770-ae0a-48f1-8f1c-b2dd7b834c3f",
   "metadata": {},
   "source": [
    "The `expand_bond_dimension` function increases the bond dimension to target value specified by the `compress_config`.\n",
    "In short, the function adds the vectors in the Krylov space $H^n|\\psi\\rangle$ to the input wavefunction $|\\psi\\rangle$, and then compresses it to the target bond dimension.\n",
    "\n",
    "The `include_ex` option is specifically designed for systems with quantum number conservation. If the initial wavefunction does not include contributions from a certain symmetry sector, these contributions will not reappear during time evolution due to the projection error in TDVP.\n",
    "Setting `include_ex=True` will add a small perturbation to the initial state to help recover the missing symmetry sector contributions.\n",
    "In our case, the quantum number conservation is disabled, so we set `include_ex=False`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "5f2a1509-ab7c-4e70-9d4c-5d26bb2e8502",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:34.470651Z",
     "iopub.status.busy": "2025-08-12T09:13:34.469564Z",
     "iopub.status.idle": "2025-08-12T09:13:34.485114Z",
     "shell.execute_reply": "2025-08-12T09:13:34.484525Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 8, 1]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_mps = mps.expand_bond_dimension(mpo, include_ex=False)\n",
    "new_mps.bond_dims"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1327a932-169a-41ac-8378-bc6ec1f23922",
   "metadata": {},
   "source": [
    "## Observing Marcus Inverted Region"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "037ddca4-7cd6-49f6-86cf-eb46e4419787",
   "metadata": {},
   "source": [
    "Next, we put everything together and perform time evolution with different $\\Delta G$ using TDVP-PS.\n",
    "Since the initial state of time evolution is a Hartree product state, we must expand the bond dimension before performing the time evolution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0dde7c58-04dc-478e-813d-8402ddfc929e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:34.487854Z",
     "iopub.status.busy": "2025-08-12T09:13:34.487629Z",
     "iopub.status.idle": "2025-08-12T09:13:37.078762Z",
     "shell.execute_reply": "2025-08-12T09:13:37.078085Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,513[INFO] MPS bond dimension: [1, 2, 8, 1]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,516[INFO] Step 0. Time 0.00. $n$ 1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,542[INFO] Step 1. Time 0.50. $n$ 0.9975776788496081\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,567[INFO] Step 2. Time 1.00. $n$ 0.9911341778211975\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,593[INFO] Step 3. Time 1.50. $n$ 0.9824981838275647\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,618[INFO] Step 4. Time 2.00. $n$ 0.9733283418283654\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,644[INFO] Step 5. Time 2.50. $n$ 0.9645218516469737\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,669[INFO] Step 6. Time 3.00. $n$ 0.956338236849221\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,693[INFO] Step 7. Time 3.50. $n$ 0.948730433389219\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,718[INFO] Step 8. Time 4.00. $n$ 0.9415533981894384\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,743[INFO] Step 9. Time 4.50. $n$ 0.9346400325046184\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,769[INFO] Step 10. Time 5.00. $n$ 0.9278351842220698\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,794[INFO] Step 11. Time 5.50. $n$ 0.9210298996164081\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,820[INFO] Step 12. Time 6.00. $n$ 0.9141749831330699\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,844[INFO] Step 13. Time 6.50. $n$ 0.9072563582422922\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,869[INFO] Step 14. Time 7.00. $n$ 0.9002591286104606\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,894[INFO] Step 15. Time 7.50. $n$ 0.8931521085342403\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,918[INFO] Step 16. Time 8.00. $n$ 0.8858943878575136\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,943[INFO] Step 17. Time 8.50. $n$ 0.8784553598367533\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,968[INFO] Step 18. Time 9.00. $n$ 0.8708472420517182\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:34,992[INFO] Step 19. Time 9.50. $n$ 0.8631616549410925\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,036[INFO] MPS bond dimension: [1, 2, 8, 1]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,037[INFO] Step 0. Time 0.00. $n$ 1.0000000000000002\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,062[INFO] Step 1. Time 0.50. $n$ 0.9975401925879049\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,087[INFO] Step 2. Time 1.00. $n$ 0.990601362849024\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,112[INFO] Step 3. Time 1.50. $n$ 0.9802488858640299\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,137[INFO] Step 4. Time 2.00. $n$ 0.9676593608104574\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,161[INFO] Step 5. Time 2.50. $n$ 0.9537696503060062\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,186[INFO] Step 6. Time 3.00. $n$ 0.939207294852095\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,211[INFO] Step 7. Time 3.50. $n$ 0.9243586104260207\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,237[INFO] Step 8. Time 4.00. $n$ 0.909439784835915\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,264[INFO] Step 9. Time 4.50. $n$ 0.8945511232283814\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,290[INFO] Step 10. Time 5.00. $n$ 0.8797430038665828\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,317[INFO] Step 11. Time 5.50. $n$ 0.8650797798247604\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,343[INFO] Step 12. Time 6.00. $n$ 0.8506519218071078\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,368[INFO] Step 13. Time 6.50. $n$ 0.8365374567180586\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,393[INFO] Step 14. Time 7.00. $n$ 0.8227688239625943\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,417[INFO] Step 15. Time 7.50. $n$ 0.8093300617593495\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,442[INFO] Step 16. Time 8.00. $n$ 0.7961632960693847\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,466[INFO] Step 17. Time 8.50. $n$ 0.7831685752085122\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,491[INFO] Step 18. Time 9.00. $n$ 0.7702000677823149\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,515[INFO] Step 19. Time 9.50. $n$ 0.7570646850987613\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,559[INFO] MPS bond dimension: [1, 2, 8, 1]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,561[INFO] Step 0. Time 0.00. $n$ 1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,585[INFO] Step 1. Time 0.50. $n$ 0.9975277339592454\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,609[INFO] Step 2. Time 1.00. $n$ 0.9904261839751384\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,634[INFO] Step 3. Time 1.50. $n$ 0.9795268047068664\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,658[INFO] Step 4. Time 2.00. $n$ 0.9659170449060817\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,683[INFO] Step 5. Time 2.50. $n$ 0.950685008940619\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,707[INFO] Step 6. Time 3.00. $n$ 0.9347455146607812\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,732[INFO] Step 7. Time 3.50. $n$ 0.9187422726641733\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,755[INFO] Step 8. Time 4.00. $n$ 0.9030158921696068\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,781[INFO] Step 9. Time 4.50. $n$ 0.8876520609099685\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,805[INFO] Step 10. Time 5.00. $n$ 0.8725982798020405\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,830[INFO] Step 11. Time 5.50. $n$ 0.8577742342547123\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,855[INFO] Step 12. Time 6.00. $n$ 0.8431151893156017\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,879[INFO] Step 13. Time 6.50. $n$ 0.8285809886892026\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,903[INFO] Step 14. Time 7.00. $n$ 0.8141772509631209\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,927[INFO] Step 15. Time 7.50. $n$ 0.7999687732355276\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,952[INFO] Step 16. Time 8.00. $n$ 0.7860556760297779\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:35,976[INFO] Step 17. Time 8.50. $n$ 0.7725203376680742\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,001[INFO] Step 18. Time 9.00. $n$ 0.7593659426880252\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,025[INFO] Step 19. Time 9.50. $n$ 0.7464615604976077\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,069[INFO] MPS bond dimension: [1, 2, 8, 1]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,070[INFO] Step 0. Time 0.00. $n$ 1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,096[INFO] Step 1. Time 0.50. $n$ 0.9975406090105963\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,121[INFO] Step 2. Time 1.00. $n$ 0.9906249611406743\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,145[INFO] Step 3. Time 1.50. $n$ 0.9804700824710465\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,169[INFO] Step 4. Time 2.00. $n$ 0.9686190882357234\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,194[INFO] Step 5. Time 2.50. $n$ 0.9564506630039299\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,218[INFO] Step 6. Time 3.00. $n$ 0.944824401740503\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,242[INFO] Step 7. Time 3.50. $n$ 0.9339798618065531\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,267[INFO] Step 8. Time 4.00. $n$ 0.9236970054402206\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,292[INFO] Step 9. Time 4.50. $n$ 0.9136118419963739\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,317[INFO] Step 10. Time 5.00. $n$ 0.9034945341198813\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,342[INFO] Step 11. Time 5.50. $n$ 0.8933290940558758\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,367[INFO] Step 12. Time 6.00. $n$ 0.8832123669566789\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,391[INFO] Step 13. Time 6.50. $n$ 0.8732206640791175\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,415[INFO] Step 14. Time 7.00. $n$ 0.8633414313596279\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,440[INFO] Step 15. Time 7.50. $n$ 0.8534881635602922\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,465[INFO] Step 16. Time 8.00. $n$ 0.8435889215797642\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,490[INFO] Step 17. Time 8.50. $n$ 0.8336922458094261\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,516[INFO] Step 18. Time 9.00. $n$ 0.8239993933202377\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,541[INFO] Step 19. Time 9.50. $n$ 0.8147658344266686\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,586[INFO] MPS bond dimension: [1, 2, 8, 1]\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,587[INFO] Step 0. Time 0.00. $n$ 1.0000000000000002\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,613[INFO] Step 1. Time 0.50. $n$ 0.9975784978846651\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,637[INFO] Step 2. Time 1.00. $n$ 0.9911783314788768\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,662[INFO] Step 3. Time 1.50. $n$ 0.9828793267407635\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,686[INFO] Step 4. Time 2.00. $n$ 0.9748047375106147\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,711[INFO] Step 5. Time 2.50. $n$ 0.9681008008243928\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,736[INFO] Step 6. Time 3.00. $n$ 0.9626946118364345\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,760[INFO] Step 7. Time 3.50. $n$ 0.9578334887382822\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,784[INFO] Step 8. Time 4.00. $n$ 0.9528636883612422\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,809[INFO] Step 9. Time 4.50. $n$ 0.9476402488995224\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,833[INFO] Step 10. Time 5.00. $n$ 0.9423714783197237\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,858[INFO] Step 11. Time 5.50. $n$ 0.9372226613912147\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,882[INFO] Step 12. Time 6.00. $n$ 0.9321434873912725\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,906[INFO] Step 13. Time 6.50. $n$ 0.9270168710222633\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,930[INFO] Step 14. Time 7.00. $n$ 0.9218472771188859\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,955[INFO] Step 15. Time 7.50. $n$ 0.9167421622570106\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:36,980[INFO] Step 16. Time 8.00. $n$ 0.9117276598161903\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:37,004[INFO] Step 17. Time 8.50. $n$ 0.906647971796358\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:37,028[INFO] Step 18. Time 9.00. $n$ 0.9013355144433696\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-12 09:13:37,052[INFO] Step 19. Time 9.50. $n$ 0.8959335401185704\n"
     ]
    }
   ],
   "source": [
    "# time evolution step\n",
    "dt = 0.5\n",
    "\n",
    "# initialize the MPS\n",
    "init_mps = Mps.hartree_product_state(model, condition=init_condition)\n",
    "# setup compression configuration\n",
    "init_mps.compress_config = CompressConfig(CompressCriteria.fixed, max_bonddim=8)\n",
    "# setup time evolution configuration\n",
    "init_mps.evolve_config = EvolveConfig(EvolveMethod.tdvp_ps)\n",
    "\n",
    "\n",
    "# record the electronic occupation\n",
    "n_list_list = []\n",
    "\n",
    "delta_g_list = np.linspace(0, -2, 5)\n",
    "for delta_g in delta_g_list:\n",
    "    # reconstruct the Hamiltonian. We can reuse the occupation operator though\n",
    "    model = get_model(delta_g)\n",
    "    mpo = Mpo(model)\n",
    "    # expand the bond dimension\n",
    "    mps = init_mps.expand_bond_dimension(mpo, include_ex=False)\n",
    "    logger.info(f\"MPS bond dimension: {mps.bond_dims}\")\n",
    "    n_list = []\n",
    "    for i_step in range(20):\n",
    "        n = mps.expectation(n_op)\n",
    "        logger.info(f\"Step {i_step}. Time {i_step * dt:.2f}. $n$ {n}\")\n",
    "        # perform time evolution. Note that the evolution is not in-place.\n",
    "        mps = mps.evolve(mpo, dt)\n",
    "        n_list.append(n)\n",
    "    n_list_list.append(n_list)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "350fdecf-24ac-4555-96f9-9139dd061ac2",
   "metadata": {},
   "source": [
    "By plotting the figure, we see that when $\\Delta G=-1$, the charge transfer rate is highest."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "60df9730-334d-4fe7-af4f-a237afedd7d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-12T09:13:37.082070Z",
     "iopub.status.busy": "2025-08-12T09:13:37.081679Z",
     "iopub.status.idle": "2025-08-12T09:13:38.682729Z",
     "shell.execute_reply": "2025-08-12T09:13:38.681958Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f62f72a0100>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x300 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "t = np.arange(len(n_list_list[0])) * dt\n",
    "for i, n_list in enumerate(n_list_list):\n",
    "    label = r\"$\\Delta G =\" + str(delta_g_list[i]) + \"$\"\n",
    "    plt.plot(t, n_list, label=label, linestyle=\"--\")\n",
    "plt.xlabel(\"$t$\")\n",
    "plt.ylabel(r\"Occupation $\\langle a^\\dagger_0 a_0 \\rangle$\")\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "974d31d5-004a-49bf-a785-43814d20e7b7",
   "metadata": {},
   "source": [
    "The prediction is consistent with the Marcus theory ,where the Marcus rate is\n",
    "\n",
    "$$\n",
    "k = \\frac{V^2}{\\hbar} \\sqrt{\\frac{\\pi\\beta}{\\lambda}} \\exp{\\left (-\\frac{\\beta(\\lambda + \\Delta G)^2}{4\\lambda} \\right )}\n",
    "$$\n",
    "Here $\\lambda = 2g^2\\omega = 1$ is the reorganization energy."
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
